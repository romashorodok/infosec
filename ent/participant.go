// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gofrs/uuid"
	"github.com/romashorodok/infosec/ent/participant"
)

// Participant is the model entity for the Participant schema.
type Participant struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParticipantQuery when eager-loading is set.
	Edges             ParticipantEdges `json:"edges"`
	user_participants *uuid.UUID
	selectValues      sql.SelectValues
}

// ParticipantEdges holds the relations/edges for other nodes in the graph.
type ParticipantEdges struct {
	// Boards holds the value of the boards edge.
	Boards []*Board `json:"boards,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BoardsOrErr returns the Boards value or an error if the edge
// was not loaded in eager-loading.
func (e ParticipantEdges) BoardsOrErr() ([]*Board, error) {
	if e.loadedTypes[0] {
		return e.Boards, nil
	}
	return nil, &NotLoadedError{edge: "boards"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ParticipantEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Participant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case participant.FieldID:
			values[i] = new(sql.NullInt64)
		case participant.ForeignKeys[0]: // user_participants
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Participant fields.
func (pa *Participant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case participant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case participant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_participants", values[i])
			} else if value.Valid {
				pa.user_participants = new(uuid.UUID)
				*pa.user_participants = *value.S.(*uuid.UUID)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Participant.
// This includes values selected through modifiers, order, etc.
func (pa *Participant) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryBoards queries the "boards" edge of the Participant entity.
func (pa *Participant) QueryBoards() *BoardQuery {
	return NewParticipantClient(pa.config).QueryBoards(pa)
}

// QueryTasks queries the "tasks" edge of the Participant entity.
func (pa *Participant) QueryTasks() *TaskQuery {
	return NewParticipantClient(pa.config).QueryTasks(pa)
}

// Update returns a builder for updating this Participant.
// Note that you need to call Participant.Unwrap() before calling this method if this Participant
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Participant) Update() *ParticipantUpdateOne {
	return NewParticipantClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Participant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Participant) Unwrap() *Participant {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Participant is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Participant) String() string {
	var builder strings.Builder
	builder.WriteString("Participant(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Participants is a parsable slice of Participant.
type Participants []*Participant
