// Package kanban provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package kanban

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Board1801851120View defines model for Board1801851120View.
type Board1801851120View struct {
	Id    int32  `json:"id"`
	Title string `json:"title"`
}

// Grant3830068376View defines model for Grant3830068376View.
type Grant3830068376View struct {
	Id int32 `json:"id"`
}

// Participant3207254963View defines model for Participant3207254963View.
type Participant3207254963View struct {
	Id int32 `json:"id"`
}

// ParticipantBoard defines model for ParticipantBoard.
type ParticipantBoard struct {
	UserId openapi_types.UUID `json:"user_id"`
}

// Pillar2836507524View defines model for Pillar2836507524View.
type Pillar2836507524View struct {
	Id int32 `json:"id"`
}

// Task3595956673View defines model for Task3595956673View.
type Task3595956673View struct {
	Description string `json:"description"`
	Id          int32  `json:"id"`
	Title       string `json:"title"`
}

// User1841989870View defines model for User1841989870View.
type User1841989870View struct {
	Id       string `json:"id"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// N400 defines model for 400.
type N400 struct {
	Code   *int32                  `json:"code,omitempty"`
	Errors *map[string]interface{} `json:"errors,omitempty"`
	Status *string                 `json:"status,omitempty"`
}

// N404 defines model for 404.
type N404 struct {
	Code   *int32                  `json:"code,omitempty"`
	Errors *map[string]interface{} `json:"errors,omitempty"`
	Status *string                 `json:"status,omitempty"`
}

// N500 defines model for 500.
type N500 struct {
	Code   *int32                  `json:"code,omitempty"`
	Errors *map[string]interface{} `json:"errors,omitempty"`
	Status *string                 `json:"status,omitempty"`
}

// ListBoardParams defines parameters for ListBoard.
type ListBoardParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateBoardJSONBody defines parameters for CreateBoard.
type CreateBoardJSONBody struct {
	Participants *[]int32 `json:"participants,omitempty"`
	Pillars      *[]int32 `json:"pillars,omitempty"`
	Tasks        *[]int32 `json:"tasks,omitempty"`
	Title        string   `json:"title"`
}

// UpdateBoardJSONBody defines parameters for UpdateBoard.
type UpdateBoardJSONBody struct {
	Participants *[]int32 `json:"participants,omitempty"`
	Pillars      *[]int32 `json:"pillars,omitempty"`
	Tasks        *[]int32 `json:"tasks,omitempty"`
	Title        string   `json:"title"`
}

// RemoveBoardParticipantParams defines parameters for RemoveBoardParticipant.
type RemoveBoardParticipantParams struct {
	// UserId ID of the Participant to be removed
	UserId openapi_types.UUID `form:"user_id" json:"user_id"`
}

// ListBoardParticipantsParams defines parameters for ListBoardParticipants.
type ListBoardParticipantsParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// RemoveBoardPillarParams defines parameters for RemoveBoardPillar.
type RemoveBoardPillarParams struct {
	// PillarId ID of the Pillar to be removed
	PillarId int32 `form:"pillar_id" json:"pillar_id"`
}

// ListBoardPillarsParams defines parameters for ListBoardPillars.
type ListBoardPillarsParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// RemoveBoardTaskParams defines parameters for RemoveBoardTask.
type RemoveBoardTaskParams struct {
	// TaskId ID of the Task to be removed
	TaskId int32 `form:"task_id" json:"task_id"`
}

// ListBoardTasksParams defines parameters for ListBoardTasks.
type ListBoardTasksParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// AddBoardTaskJSONBody defines parameters for AddBoardTask.
type AddBoardTaskJSONBody struct {
	// Description Description of the Task
	Description *string `json:"description,omitempty"`

	// Title Title of the Task
	Title *string `json:"title,omitempty"`
}

// AddBoardTaskParams defines parameters for AddBoardTask.
type AddBoardTaskParams struct {
	// PillarId ID of the Pillar to be added
	PillarId int32 `form:"pillar_id" json:"pillar_id"`
}

// ListGrantParams defines parameters for ListGrant.
type ListGrantParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateGrantJSONBody defines parameters for CreateGrant.
type CreateGrantJSONBody = map[string]interface{}

// UpdateGrantJSONBody defines parameters for UpdateGrant.
type UpdateGrantJSONBody = map[string]interface{}

// ListParticipantParams defines parameters for ListParticipant.
type ListParticipantParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateParticipantJSONBody defines parameters for CreateParticipant.
type CreateParticipantJSONBody struct {
	Boards *[]int32 `json:"boards,omitempty"`
	Tasks  *[]int32 `json:"tasks,omitempty"`
}

// UpdateParticipantJSONBody defines parameters for UpdateParticipant.
type UpdateParticipantJSONBody struct {
	Boards *[]int32 `json:"boards,omitempty"`
	Tasks  *[]int32 `json:"tasks,omitempty"`
}

// ListParticipantBoardsParams defines parameters for ListParticipantBoards.
type ListParticipantBoardsParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// ListParticipantTasksParams defines parameters for ListParticipantTasks.
type ListParticipantTasksParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// ListPillarParams defines parameters for ListPillar.
type ListPillarParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreatePillarJSONBody defines parameters for CreatePillar.
type CreatePillarJSONBody struct {
	Tasks *[]int32 `json:"tasks,omitempty"`
}

// UpdatePillarJSONBody defines parameters for UpdatePillar.
type UpdatePillarJSONBody struct {
	Tasks *[]int32 `json:"tasks,omitempty"`
}

// ListPillarTasksParams defines parameters for ListPillarTasks.
type ListPillarTasksParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// ListTaskParams defines parameters for ListTask.
type ListTaskParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody struct {
	Description  string   `json:"description"`
	Participants *[]int32 `json:"participants,omitempty"`
	Title        string   `json:"title"`
}

// UpdateTaskJSONBody defines parameters for UpdateTask.
type UpdateTaskJSONBody struct {
	Description  string   `json:"description"`
	Participants *[]int32 `json:"participants,omitempty"`
	Title        string   `json:"title"`
}

// ListTaskParticipantsParams defines parameters for ListTaskParticipants.
type ListTaskParticipantsParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// ListUserParams defines parameters for ListUser.
type ListUserParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Participants *[]int32 `json:"Participants,omitempty"`
	Password     string   `json:"password"`
	Username     string   `json:"username"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Participants *[]int32 `json:"Participants,omitempty"`
	Password     string   `json:"password"`
	Username     string   `json:"username"`
}

// ListUserParticipantsParams defines parameters for ListUserParticipants.
type ListUserParticipantsParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateBoardJSONRequestBody defines body for CreateBoard for application/json ContentType.
type CreateBoardJSONRequestBody CreateBoardJSONBody

// UpdateBoardJSONRequestBody defines body for UpdateBoard for application/json ContentType.
type UpdateBoardJSONRequestBody UpdateBoardJSONBody

// AddBoardParticipantJSONRequestBody defines body for AddBoardParticipant for application/json ContentType.
type AddBoardParticipantJSONRequestBody = ParticipantBoard

// AddBoardTaskJSONRequestBody defines body for AddBoardTask for application/json ContentType.
type AddBoardTaskJSONRequestBody AddBoardTaskJSONBody

// CreateGrantJSONRequestBody defines body for CreateGrant for application/json ContentType.
type CreateGrantJSONRequestBody = CreateGrantJSONBody

// UpdateGrantJSONRequestBody defines body for UpdateGrant for application/json ContentType.
type UpdateGrantJSONRequestBody = UpdateGrantJSONBody

// CreateParticipantJSONRequestBody defines body for CreateParticipant for application/json ContentType.
type CreateParticipantJSONRequestBody CreateParticipantJSONBody

// UpdateParticipantJSONRequestBody defines body for UpdateParticipant for application/json ContentType.
type UpdateParticipantJSONRequestBody UpdateParticipantJSONBody

// CreatePillarJSONRequestBody defines body for CreatePillar for application/json ContentType.
type CreatePillarJSONRequestBody CreatePillarJSONBody

// UpdatePillarJSONRequestBody defines body for UpdatePillar for application/json ContentType.
type UpdatePillarJSONRequestBody UpdatePillarJSONBody

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody CreateTaskJSONBody

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody UpdateTaskJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Boards
	// (GET /boards)
	ListBoard(w http.ResponseWriter, r *http.Request, params ListBoardParams)
	// Create a new Board
	// (POST /boards)
	CreateBoard(w http.ResponseWriter, r *http.Request)
	// Deletes a Board by ID
	// (DELETE /boards/{id})
	DeleteBoard(w http.ResponseWriter, r *http.Request, id int32)
	// Find a Board by ID
	// (GET /boards/{id})
	ReadBoard(w http.ResponseWriter, r *http.Request, id int32)
	// Updates a Board
	// (PATCH /boards/{id})
	UpdateBoard(w http.ResponseWriter, r *http.Request, id int32)
	// Delete a Participant to the Board
	// (DELETE /boards/{id}/participants)
	RemoveBoardParticipant(w http.ResponseWriter, r *http.Request, id int32, params RemoveBoardParticipantParams)
	// Find the attached Participants
	// (GET /boards/{id}/participants)
	ListBoardParticipants(w http.ResponseWriter, r *http.Request, id int32, params ListBoardParticipantsParams)
	// Add a Participant to the Board
	// (POST /boards/{id}/participants)
	AddBoardParticipant(w http.ResponseWriter, r *http.Request, id int32)
	// Remove a Pillar from the Board
	// (DELETE /boards/{id}/pillars)
	RemoveBoardPillar(w http.ResponseWriter, r *http.Request, id int32, params RemoveBoardPillarParams)
	// Find the attached Pillars
	// (GET /boards/{id}/pillars)
	ListBoardPillars(w http.ResponseWriter, r *http.Request, id int32, params ListBoardPillarsParams)
	// Add a Pillar to the Board
	// (POST /boards/{id}/pillars)
	AddBoardPillar(w http.ResponseWriter, r *http.Request, id int32)
	// Remove a Task from the Board
	// (DELETE /boards/{id}/tasks)
	RemoveBoardTask(w http.ResponseWriter, r *http.Request, id int32, params RemoveBoardTaskParams)
	// Find the attached Tasks
	// (GET /boards/{id}/tasks)
	ListBoardTasks(w http.ResponseWriter, r *http.Request, id int32, params ListBoardTasksParams)
	// Add a Task to the Board
	// (POST /boards/{id}/tasks)
	AddBoardTask(w http.ResponseWriter, r *http.Request, id int32, params AddBoardTaskParams)
	// List Grants
	// (GET /grants)
	ListGrant(w http.ResponseWriter, r *http.Request, params ListGrantParams)
	// Create a new Grant
	// (POST /grants)
	CreateGrant(w http.ResponseWriter, r *http.Request)
	// Deletes a Grant by ID
	// (DELETE /grants/{id})
	DeleteGrant(w http.ResponseWriter, r *http.Request, id int32)
	// Find a Grant by ID
	// (GET /grants/{id})
	ReadGrant(w http.ResponseWriter, r *http.Request, id int32)
	// Updates a Grant
	// (PATCH /grants/{id})
	UpdateGrant(w http.ResponseWriter, r *http.Request, id int32)
	// List Participants
	// (GET /participants)
	ListParticipant(w http.ResponseWriter, r *http.Request, params ListParticipantParams)
	// Create a new Participant
	// (POST /participants)
	CreateParticipant(w http.ResponseWriter, r *http.Request)
	// Deletes a Participant by ID
	// (DELETE /participants/{id})
	DeleteParticipant(w http.ResponseWriter, r *http.Request, id int32)
	// Find a Participant by ID
	// (GET /participants/{id})
	ReadParticipant(w http.ResponseWriter, r *http.Request, id int32)
	// Updates a Participant
	// (PATCH /participants/{id})
	UpdateParticipant(w http.ResponseWriter, r *http.Request, id int32)
	// Find the attached Boards
	// (GET /participants/{id}/boards)
	ListParticipantBoards(w http.ResponseWriter, r *http.Request, id int32, params ListParticipantBoardsParams)
	// Find the attached Tasks
	// (GET /participants/{id}/tasks)
	ListParticipantTasks(w http.ResponseWriter, r *http.Request, id int32, params ListParticipantTasksParams)
	// List Pillars
	// (GET /pillars)
	ListPillar(w http.ResponseWriter, r *http.Request, params ListPillarParams)
	// Create a new Pillar
	// (POST /pillars)
	CreatePillar(w http.ResponseWriter, r *http.Request)
	// Deletes a Pillar by ID
	// (DELETE /pillars/{id})
	DeletePillar(w http.ResponseWriter, r *http.Request, id int32)
	// Find a Pillar by ID
	// (GET /pillars/{id})
	ReadPillar(w http.ResponseWriter, r *http.Request, id int32)
	// Updates a Pillar
	// (PATCH /pillars/{id})
	UpdatePillar(w http.ResponseWriter, r *http.Request, id int32)
	// Find the attached Tasks
	// (GET /pillars/{id}/tasks)
	ListPillarTasks(w http.ResponseWriter, r *http.Request, id int32, params ListPillarTasksParams)
	// List Tasks
	// (GET /tasks)
	ListTask(w http.ResponseWriter, r *http.Request, params ListTaskParams)
	// Create a new Task
	// (POST /tasks)
	CreateTask(w http.ResponseWriter, r *http.Request)
	// Deletes a Task by ID
	// (DELETE /tasks/{id})
	DeleteTask(w http.ResponseWriter, r *http.Request, id int32)
	// Find a Task by ID
	// (GET /tasks/{id})
	ReadTask(w http.ResponseWriter, r *http.Request, id int32)
	// Updates a Task
	// (PATCH /tasks/{id})
	UpdateTask(w http.ResponseWriter, r *http.Request, id int32)
	// Find the attached Participants
	// (GET /tasks/{id}/participants)
	ListTaskParticipants(w http.ResponseWriter, r *http.Request, id int32, params ListTaskParticipantsParams)
	// List Users
	// (GET /users)
	ListUser(w http.ResponseWriter, r *http.Request, params ListUserParams)
	// Create a new User
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Get all User Boards
	// (GET /users/boards)
	GetUserBoards(w http.ResponseWriter, r *http.Request)
	// Deletes a User by ID
	// (DELETE /users/{id})
	DeleteUser(w http.ResponseWriter, r *http.Request, id string)
	// Find a User by ID
	// (GET /users/{id})
	ReadUser(w http.ResponseWriter, r *http.Request, id string)
	// Updates a User
	// (PATCH /users/{id})
	UpdateUser(w http.ResponseWriter, r *http.Request, id string)
	// Find the attached Participants
	// (GET /users/{id}/participants)
	ListUserParticipants(w http.ResponseWriter, r *http.Request, id string, params ListUserParticipantsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List Boards
// (GET /boards)
func (_ Unimplemented) ListBoard(w http.ResponseWriter, r *http.Request, params ListBoardParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new Board
// (POST /boards)
func (_ Unimplemented) CreateBoard(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a Board by ID
// (DELETE /boards/{id})
func (_ Unimplemented) DeleteBoard(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a Board by ID
// (GET /boards/{id})
func (_ Unimplemented) ReadBoard(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a Board
// (PATCH /boards/{id})
func (_ Unimplemented) UpdateBoard(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a Participant to the Board
// (DELETE /boards/{id}/participants)
func (_ Unimplemented) RemoveBoardParticipant(w http.ResponseWriter, r *http.Request, id int32, params RemoveBoardParticipantParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Participants
// (GET /boards/{id}/participants)
func (_ Unimplemented) ListBoardParticipants(w http.ResponseWriter, r *http.Request, id int32, params ListBoardParticipantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a Participant to the Board
// (POST /boards/{id}/participants)
func (_ Unimplemented) AddBoardParticipant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove a Pillar from the Board
// (DELETE /boards/{id}/pillars)
func (_ Unimplemented) RemoveBoardPillar(w http.ResponseWriter, r *http.Request, id int32, params RemoveBoardPillarParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Pillars
// (GET /boards/{id}/pillars)
func (_ Unimplemented) ListBoardPillars(w http.ResponseWriter, r *http.Request, id int32, params ListBoardPillarsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a Pillar to the Board
// (POST /boards/{id}/pillars)
func (_ Unimplemented) AddBoardPillar(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove a Task from the Board
// (DELETE /boards/{id}/tasks)
func (_ Unimplemented) RemoveBoardTask(w http.ResponseWriter, r *http.Request, id int32, params RemoveBoardTaskParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Tasks
// (GET /boards/{id}/tasks)
func (_ Unimplemented) ListBoardTasks(w http.ResponseWriter, r *http.Request, id int32, params ListBoardTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a Task to the Board
// (POST /boards/{id}/tasks)
func (_ Unimplemented) AddBoardTask(w http.ResponseWriter, r *http.Request, id int32, params AddBoardTaskParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Grants
// (GET /grants)
func (_ Unimplemented) ListGrant(w http.ResponseWriter, r *http.Request, params ListGrantParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new Grant
// (POST /grants)
func (_ Unimplemented) CreateGrant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a Grant by ID
// (DELETE /grants/{id})
func (_ Unimplemented) DeleteGrant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a Grant by ID
// (GET /grants/{id})
func (_ Unimplemented) ReadGrant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a Grant
// (PATCH /grants/{id})
func (_ Unimplemented) UpdateGrant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Participants
// (GET /participants)
func (_ Unimplemented) ListParticipant(w http.ResponseWriter, r *http.Request, params ListParticipantParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new Participant
// (POST /participants)
func (_ Unimplemented) CreateParticipant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a Participant by ID
// (DELETE /participants/{id})
func (_ Unimplemented) DeleteParticipant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a Participant by ID
// (GET /participants/{id})
func (_ Unimplemented) ReadParticipant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a Participant
// (PATCH /participants/{id})
func (_ Unimplemented) UpdateParticipant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Boards
// (GET /participants/{id}/boards)
func (_ Unimplemented) ListParticipantBoards(w http.ResponseWriter, r *http.Request, id int32, params ListParticipantBoardsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Tasks
// (GET /participants/{id}/tasks)
func (_ Unimplemented) ListParticipantTasks(w http.ResponseWriter, r *http.Request, id int32, params ListParticipantTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Pillars
// (GET /pillars)
func (_ Unimplemented) ListPillar(w http.ResponseWriter, r *http.Request, params ListPillarParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new Pillar
// (POST /pillars)
func (_ Unimplemented) CreatePillar(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a Pillar by ID
// (DELETE /pillars/{id})
func (_ Unimplemented) DeletePillar(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a Pillar by ID
// (GET /pillars/{id})
func (_ Unimplemented) ReadPillar(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a Pillar
// (PATCH /pillars/{id})
func (_ Unimplemented) UpdatePillar(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Tasks
// (GET /pillars/{id}/tasks)
func (_ Unimplemented) ListPillarTasks(w http.ResponseWriter, r *http.Request, id int32, params ListPillarTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Tasks
// (GET /tasks)
func (_ Unimplemented) ListTask(w http.ResponseWriter, r *http.Request, params ListTaskParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new Task
// (POST /tasks)
func (_ Unimplemented) CreateTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a Task by ID
// (DELETE /tasks/{id})
func (_ Unimplemented) DeleteTask(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a Task by ID
// (GET /tasks/{id})
func (_ Unimplemented) ReadTask(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a Task
// (PATCH /tasks/{id})
func (_ Unimplemented) UpdateTask(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Participants
// (GET /tasks/{id}/participants)
func (_ Unimplemented) ListTaskParticipants(w http.ResponseWriter, r *http.Request, id int32, params ListTaskParticipantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Users
// (GET /users)
func (_ Unimplemented) ListUser(w http.ResponseWriter, r *http.Request, params ListUserParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new User
// (POST /users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all User Boards
// (GET /users/boards)
func (_ Unimplemented) GetUserBoards(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a User by ID
// (DELETE /users/{id})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a User by ID
// (GET /users/{id})
func (_ Unimplemented) ReadUser(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a User
// (PATCH /users/{id})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Participants
// (GET /users/{id}/participants)
func (_ Unimplemented) ListUserParticipants(w http.ResponseWriter, r *http.Request, id string, params ListUserParticipantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListBoard operation middleware
func (siw *ServerInterfaceWrapper) ListBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBoardParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBoard(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateBoard operation middleware
func (siw *ServerInterfaceWrapper) CreateBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBoard(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBoard operation middleware
func (siw *ServerInterfaceWrapper) DeleteBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBoard(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadBoard operation middleware
func (siw *ServerInterfaceWrapper) ReadBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadBoard(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateBoard operation middleware
func (siw *ServerInterfaceWrapper) UpdateBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateBoard(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RemoveBoardParticipant operation middleware
func (siw *ServerInterfaceWrapper) RemoveBoardParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RemoveBoardParticipantParams

	// ------------- Required query parameter "user_id" -------------

	if paramValue := r.URL.Query().Get("user_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "user_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveBoardParticipant(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListBoardParticipants operation middleware
func (siw *ServerInterfaceWrapper) ListBoardParticipants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBoardParticipantsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBoardParticipants(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddBoardParticipant operation middleware
func (siw *ServerInterfaceWrapper) AddBoardParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddBoardParticipant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RemoveBoardPillar operation middleware
func (siw *ServerInterfaceWrapper) RemoveBoardPillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params RemoveBoardPillarParams

	// ------------- Required query parameter "pillar_id" -------------

	if paramValue := r.URL.Query().Get("pillar_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pillar_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pillar_id", r.URL.Query(), &params.PillarId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pillar_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveBoardPillar(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListBoardPillars operation middleware
func (siw *ServerInterfaceWrapper) ListBoardPillars(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBoardPillarsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBoardPillars(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddBoardPillar operation middleware
func (siw *ServerInterfaceWrapper) AddBoardPillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddBoardPillar(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RemoveBoardTask operation middleware
func (siw *ServerInterfaceWrapper) RemoveBoardTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RemoveBoardTaskParams

	// ------------- Required query parameter "task_id" -------------

	if paramValue := r.URL.Query().Get("task_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "task_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "task_id", r.URL.Query(), &params.TaskId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveBoardTask(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListBoardTasks operation middleware
func (siw *ServerInterfaceWrapper) ListBoardTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBoardTasksParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBoardTasks(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddBoardTask operation middleware
func (siw *ServerInterfaceWrapper) AddBoardTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AddBoardTaskParams

	// ------------- Required query parameter "pillar_id" -------------

	if paramValue := r.URL.Query().Get("pillar_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "pillar_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pillar_id", r.URL.Query(), &params.PillarId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pillar_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddBoardTask(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGrant operation middleware
func (siw *ServerInterfaceWrapper) ListGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGrantParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGrant(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGrant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteGrant operation middleware
func (siw *ServerInterfaceWrapper) DeleteGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGrant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadGrant operation middleware
func (siw *ServerInterfaceWrapper) ReadGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadGrant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateGrant operation middleware
func (siw *ServerInterfaceWrapper) UpdateGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGrant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListParticipant operation middleware
func (siw *ServerInterfaceWrapper) ListParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParticipantParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListParticipant(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateParticipant operation middleware
func (siw *ServerInterfaceWrapper) CreateParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateParticipant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteParticipant operation middleware
func (siw *ServerInterfaceWrapper) DeleteParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteParticipant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadParticipant operation middleware
func (siw *ServerInterfaceWrapper) ReadParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadParticipant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateParticipant operation middleware
func (siw *ServerInterfaceWrapper) UpdateParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateParticipant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListParticipantBoards operation middleware
func (siw *ServerInterfaceWrapper) ListParticipantBoards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParticipantBoardsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListParticipantBoards(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListParticipantTasks operation middleware
func (siw *ServerInterfaceWrapper) ListParticipantTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParticipantTasksParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListParticipantTasks(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPillar operation middleware
func (siw *ServerInterfaceWrapper) ListPillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPillarParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPillar(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePillar operation middleware
func (siw *ServerInterfaceWrapper) CreatePillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePillar(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePillar operation middleware
func (siw *ServerInterfaceWrapper) DeletePillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePillar(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadPillar operation middleware
func (siw *ServerInterfaceWrapper) ReadPillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadPillar(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatePillar operation middleware
func (siw *ServerInterfaceWrapper) UpdatePillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePillar(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPillarTasks operation middleware
func (siw *ServerInterfaceWrapper) ListPillarTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPillarTasksParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPillarTasks(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTask operation middleware
func (siw *ServerInterfaceWrapper) ListTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTaskParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTask(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTask(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadTask operation middleware
func (siw *ServerInterfaceWrapper) ReadTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadTask(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTask(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTaskParticipants operation middleware
func (siw *ServerInterfaceWrapper) ListTaskParticipants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTaskParticipantsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTaskParticipants(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUser operation middleware
func (siw *ServerInterfaceWrapper) ListUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserBoards operation middleware
func (siw *ServerInterfaceWrapper) GetUserBoards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserBoards(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadUser operation middleware
func (siw *ServerInterfaceWrapper) ReadUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUserParticipants operation middleware
func (siw *ServerInterfaceWrapper) ListUserParticipants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserParticipantsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserParticipants(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/boards", wrapper.ListBoard)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/boards", wrapper.CreateBoard)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/boards/{id}", wrapper.DeleteBoard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/boards/{id}", wrapper.ReadBoard)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/boards/{id}", wrapper.UpdateBoard)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/boards/{id}/participants", wrapper.RemoveBoardParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/boards/{id}/participants", wrapper.ListBoardParticipants)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/boards/{id}/participants", wrapper.AddBoardParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/boards/{id}/pillars", wrapper.RemoveBoardPillar)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/boards/{id}/pillars", wrapper.ListBoardPillars)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/boards/{id}/pillars", wrapper.AddBoardPillar)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/boards/{id}/tasks", wrapper.RemoveBoardTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/boards/{id}/tasks", wrapper.ListBoardTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/boards/{id}/tasks", wrapper.AddBoardTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/grants", wrapper.ListGrant)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/grants", wrapper.CreateGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/grants/{id}", wrapper.DeleteGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/grants/{id}", wrapper.ReadGrant)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/grants/{id}", wrapper.UpdateGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/participants", wrapper.ListParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/participants", wrapper.CreateParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/participants/{id}", wrapper.DeleteParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/participants/{id}", wrapper.ReadParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/participants/{id}", wrapper.UpdateParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/participants/{id}/boards", wrapper.ListParticipantBoards)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/participants/{id}/tasks", wrapper.ListParticipantTasks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pillars", wrapper.ListPillar)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pillars", wrapper.CreatePillar)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pillars/{id}", wrapper.DeletePillar)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pillars/{id}", wrapper.ReadPillar)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/pillars/{id}", wrapper.UpdatePillar)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pillars/{id}/tasks", wrapper.ListPillarTasks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks", wrapper.ListTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/tasks/{id}", wrapper.DeleteTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/{id}", wrapper.ReadTask)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/tasks/{id}", wrapper.UpdateTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/{id}/participants", wrapper.ListTaskParticipants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.ListUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/boards", wrapper.GetUserBoards)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.ReadUser)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/{id}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}/participants", wrapper.ListUserParticipants)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
