// Package kanban provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package kanban

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Board575590982View defines model for Board575590982View.
type Board575590982View struct {
	Id int32 `json:"id"`
}

// Grant3830068376View defines model for Grant3830068376View.
type Grant3830068376View struct {
	Id int32 `json:"id"`
}

// Participant3207254963View defines model for Participant3207254963View.
type Participant3207254963View struct {
	Id int32 `json:"id"`
}

// Pillar2836507524View defines model for Pillar2836507524View.
type Pillar2836507524View struct {
	Id int32 `json:"id"`
}

// Task3686756101View defines model for Task3686756101View.
type Task3686756101View struct {
	Description string `json:"Description"`
	Id          int32  `json:"id"`
}

// User1841989870View defines model for User1841989870View.
type User1841989870View struct {
	Id       string `json:"id"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// N400 defines model for 400.
type N400 struct {
	Code   *int32                  `json:"code,omitempty"`
	Errors *map[string]interface{} `json:"errors,omitempty"`
	Status *string                 `json:"status,omitempty"`
}

// N404 defines model for 404.
type N404 struct {
	Code   *int32                  `json:"code,omitempty"`
	Errors *map[string]interface{} `json:"errors,omitempty"`
	Status *string                 `json:"status,omitempty"`
}

// N500 defines model for 500.
type N500 struct {
	Code   *int32                  `json:"code,omitempty"`
	Errors *map[string]interface{} `json:"errors,omitempty"`
	Status *string                 `json:"status,omitempty"`
}

// ListBoardParams defines parameters for ListBoard.
type ListBoardParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateBoardJSONBody defines parameters for CreateBoard.
type CreateBoardJSONBody struct {
	Participants *[]int32 `json:"participants,omitempty"`
	Tasks        *[]int32 `json:"tasks,omitempty"`
}

// UpdateBoardJSONBody defines parameters for UpdateBoard.
type UpdateBoardJSONBody struct {
	Participants *[]int32 `json:"participants,omitempty"`
	Tasks        *[]int32 `json:"tasks,omitempty"`
}

// ListBoardParticipantsParams defines parameters for ListBoardParticipants.
type ListBoardParticipantsParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// ListBoardTasksParams defines parameters for ListBoardTasks.
type ListBoardTasksParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// ListGrantParams defines parameters for ListGrant.
type ListGrantParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateGrantJSONBody defines parameters for CreateGrant.
type CreateGrantJSONBody = map[string]interface{}

// UpdateGrantJSONBody defines parameters for UpdateGrant.
type UpdateGrantJSONBody = map[string]interface{}

// ListParticipantParams defines parameters for ListParticipant.
type ListParticipantParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateParticipantJSONBody defines parameters for CreateParticipant.
type CreateParticipantJSONBody struct {
	Boards *[]int32 `json:"boards,omitempty"`
	Tasks  *[]int32 `json:"tasks,omitempty"`
}

// UpdateParticipantJSONBody defines parameters for UpdateParticipant.
type UpdateParticipantJSONBody struct {
	Boards *[]int32 `json:"boards,omitempty"`
	Tasks  *[]int32 `json:"tasks,omitempty"`
}

// ListParticipantBoardsParams defines parameters for ListParticipantBoards.
type ListParticipantBoardsParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// ListParticipantTasksParams defines parameters for ListParticipantTasks.
type ListParticipantTasksParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// ListPillarParams defines parameters for ListPillar.
type ListPillarParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreatePillarJSONBody defines parameters for CreatePillar.
type CreatePillarJSONBody struct {
	Tasks *[]int32 `json:"tasks,omitempty"`
}

// UpdatePillarJSONBody defines parameters for UpdatePillar.
type UpdatePillarJSONBody struct {
	Tasks *[]int32 `json:"tasks,omitempty"`
}

// ListPillarTasksParams defines parameters for ListPillarTasks.
type ListPillarTasksParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// ListTaskParams defines parameters for ListTask.
type ListTaskParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody struct {
	Description  string   `json:"Description"`
	Participants *[]int32 `json:"participants,omitempty"`
}

// UpdateTaskJSONBody defines parameters for UpdateTask.
type UpdateTaskJSONBody struct {
	Description  string   `json:"Description"`
	Participants *[]int32 `json:"participants,omitempty"`
}

// ListTaskParticipantsParams defines parameters for ListTaskParticipants.
type ListTaskParticipantsParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// ListUserParams defines parameters for ListUser.
type ListUserParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Participants *[]int32 `json:"Participants,omitempty"`
	Password     string   `json:"password"`
	Username     string   `json:"username"`
}

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	Participants *[]int32 `json:"Participants,omitempty"`
	Password     string   `json:"password"`
	Username     string   `json:"username"`
}

// ListUserParticipantsParams defines parameters for ListUserParticipants.
type ListUserParticipantsParams struct {
	// Page what page to render
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage *int32 `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
}

// CreateBoardJSONRequestBody defines body for CreateBoard for application/json ContentType.
type CreateBoardJSONRequestBody CreateBoardJSONBody

// UpdateBoardJSONRequestBody defines body for UpdateBoard for application/json ContentType.
type UpdateBoardJSONRequestBody UpdateBoardJSONBody

// CreateGrantJSONRequestBody defines body for CreateGrant for application/json ContentType.
type CreateGrantJSONRequestBody = CreateGrantJSONBody

// UpdateGrantJSONRequestBody defines body for UpdateGrant for application/json ContentType.
type UpdateGrantJSONRequestBody = UpdateGrantJSONBody

// CreateParticipantJSONRequestBody defines body for CreateParticipant for application/json ContentType.
type CreateParticipantJSONRequestBody CreateParticipantJSONBody

// UpdateParticipantJSONRequestBody defines body for UpdateParticipant for application/json ContentType.
type UpdateParticipantJSONRequestBody UpdateParticipantJSONBody

// CreatePillarJSONRequestBody defines body for CreatePillar for application/json ContentType.
type CreatePillarJSONRequestBody CreatePillarJSONBody

// UpdatePillarJSONRequestBody defines body for UpdatePillar for application/json ContentType.
type UpdatePillarJSONRequestBody UpdatePillarJSONBody

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody CreateTaskJSONBody

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody UpdateTaskJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Boards
	// (GET /boards)
	ListBoard(w http.ResponseWriter, r *http.Request, params ListBoardParams)
	// Create a new Board
	// (POST /boards)
	CreateBoard(w http.ResponseWriter, r *http.Request)
	// Deletes a Board by ID
	// (DELETE /boards/{id})
	DeleteBoard(w http.ResponseWriter, r *http.Request, id int32)
	// Find a Board by ID
	// (GET /boards/{id})
	ReadBoard(w http.ResponseWriter, r *http.Request, id int32)
	// Updates a Board
	// (PATCH /boards/{id})
	UpdateBoard(w http.ResponseWriter, r *http.Request, id int32)
	// Find the attached Participants
	// (GET /boards/{id}/participants)
	ListBoardParticipants(w http.ResponseWriter, r *http.Request, id int32, params ListBoardParticipantsParams)
	// Find the attached Tasks
	// (GET /boards/{id}/tasks)
	ListBoardTasks(w http.ResponseWriter, r *http.Request, id int32, params ListBoardTasksParams)
	// List Grants
	// (GET /grants)
	ListGrant(w http.ResponseWriter, r *http.Request, params ListGrantParams)
	// Create a new Grant
	// (POST /grants)
	CreateGrant(w http.ResponseWriter, r *http.Request)
	// Deletes a Grant by ID
	// (DELETE /grants/{id})
	DeleteGrant(w http.ResponseWriter, r *http.Request, id int32)
	// Find a Grant by ID
	// (GET /grants/{id})
	ReadGrant(w http.ResponseWriter, r *http.Request, id int32)
	// Updates a Grant
	// (PATCH /grants/{id})
	UpdateGrant(w http.ResponseWriter, r *http.Request, id int32)
	// List Participants
	// (GET /participants)
	ListParticipant(w http.ResponseWriter, r *http.Request, params ListParticipantParams)
	// Create a new Participant
	// (POST /participants)
	CreateParticipant(w http.ResponseWriter, r *http.Request)
	// Deletes a Participant by ID
	// (DELETE /participants/{id})
	DeleteParticipant(w http.ResponseWriter, r *http.Request, id int32)
	// Find a Participant by ID
	// (GET /participants/{id})
	ReadParticipant(w http.ResponseWriter, r *http.Request, id int32)
	// Updates a Participant
	// (PATCH /participants/{id})
	UpdateParticipant(w http.ResponseWriter, r *http.Request, id int32)
	// Find the attached Boards
	// (GET /participants/{id}/boards)
	ListParticipantBoards(w http.ResponseWriter, r *http.Request, id int32, params ListParticipantBoardsParams)
	// Find the attached Tasks
	// (GET /participants/{id}/tasks)
	ListParticipantTasks(w http.ResponseWriter, r *http.Request, id int32, params ListParticipantTasksParams)
	// List Pillars
	// (GET /pillars)
	ListPillar(w http.ResponseWriter, r *http.Request, params ListPillarParams)
	// Create a new Pillar
	// (POST /pillars)
	CreatePillar(w http.ResponseWriter, r *http.Request)
	// Deletes a Pillar by ID
	// (DELETE /pillars/{id})
	DeletePillar(w http.ResponseWriter, r *http.Request, id int32)
	// Find a Pillar by ID
	// (GET /pillars/{id})
	ReadPillar(w http.ResponseWriter, r *http.Request, id int32)
	// Updates a Pillar
	// (PATCH /pillars/{id})
	UpdatePillar(w http.ResponseWriter, r *http.Request, id int32)
	// Find the attached Tasks
	// (GET /pillars/{id}/tasks)
	ListPillarTasks(w http.ResponseWriter, r *http.Request, id int32, params ListPillarTasksParams)
	// List Tasks
	// (GET /tasks)
	ListTask(w http.ResponseWriter, r *http.Request, params ListTaskParams)
	// Create a new Task
	// (POST /tasks)
	CreateTask(w http.ResponseWriter, r *http.Request)
	// Deletes a Task by ID
	// (DELETE /tasks/{id})
	DeleteTask(w http.ResponseWriter, r *http.Request, id int32)
	// Find a Task by ID
	// (GET /tasks/{id})
	ReadTask(w http.ResponseWriter, r *http.Request, id int32)
	// Updates a Task
	// (PATCH /tasks/{id})
	UpdateTask(w http.ResponseWriter, r *http.Request, id int32)
	// Find the attached Participants
	// (GET /tasks/{id}/participants)
	ListTaskParticipants(w http.ResponseWriter, r *http.Request, id int32, params ListTaskParticipantsParams)
	// List Users
	// (GET /users)
	ListUser(w http.ResponseWriter, r *http.Request, params ListUserParams)
	// Create a new User
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Deletes a User by ID
	// (DELETE /users/{id})
	DeleteUser(w http.ResponseWriter, r *http.Request, id string)
	// Find a User by ID
	// (GET /users/{id})
	ReadUser(w http.ResponseWriter, r *http.Request, id string)
	// Updates a User
	// (PATCH /users/{id})
	UpdateUser(w http.ResponseWriter, r *http.Request, id string)
	// Find the attached Participants
	// (GET /users/{id}/participants)
	ListUserParticipants(w http.ResponseWriter, r *http.Request, id string, params ListUserParticipantsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List Boards
// (GET /boards)
func (_ Unimplemented) ListBoard(w http.ResponseWriter, r *http.Request, params ListBoardParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new Board
// (POST /boards)
func (_ Unimplemented) CreateBoard(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a Board by ID
// (DELETE /boards/{id})
func (_ Unimplemented) DeleteBoard(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a Board by ID
// (GET /boards/{id})
func (_ Unimplemented) ReadBoard(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a Board
// (PATCH /boards/{id})
func (_ Unimplemented) UpdateBoard(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Participants
// (GET /boards/{id}/participants)
func (_ Unimplemented) ListBoardParticipants(w http.ResponseWriter, r *http.Request, id int32, params ListBoardParticipantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Tasks
// (GET /boards/{id}/tasks)
func (_ Unimplemented) ListBoardTasks(w http.ResponseWriter, r *http.Request, id int32, params ListBoardTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Grants
// (GET /grants)
func (_ Unimplemented) ListGrant(w http.ResponseWriter, r *http.Request, params ListGrantParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new Grant
// (POST /grants)
func (_ Unimplemented) CreateGrant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a Grant by ID
// (DELETE /grants/{id})
func (_ Unimplemented) DeleteGrant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a Grant by ID
// (GET /grants/{id})
func (_ Unimplemented) ReadGrant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a Grant
// (PATCH /grants/{id})
func (_ Unimplemented) UpdateGrant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Participants
// (GET /participants)
func (_ Unimplemented) ListParticipant(w http.ResponseWriter, r *http.Request, params ListParticipantParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new Participant
// (POST /participants)
func (_ Unimplemented) CreateParticipant(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a Participant by ID
// (DELETE /participants/{id})
func (_ Unimplemented) DeleteParticipant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a Participant by ID
// (GET /participants/{id})
func (_ Unimplemented) ReadParticipant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a Participant
// (PATCH /participants/{id})
func (_ Unimplemented) UpdateParticipant(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Boards
// (GET /participants/{id}/boards)
func (_ Unimplemented) ListParticipantBoards(w http.ResponseWriter, r *http.Request, id int32, params ListParticipantBoardsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Tasks
// (GET /participants/{id}/tasks)
func (_ Unimplemented) ListParticipantTasks(w http.ResponseWriter, r *http.Request, id int32, params ListParticipantTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Pillars
// (GET /pillars)
func (_ Unimplemented) ListPillar(w http.ResponseWriter, r *http.Request, params ListPillarParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new Pillar
// (POST /pillars)
func (_ Unimplemented) CreatePillar(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a Pillar by ID
// (DELETE /pillars/{id})
func (_ Unimplemented) DeletePillar(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a Pillar by ID
// (GET /pillars/{id})
func (_ Unimplemented) ReadPillar(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a Pillar
// (PATCH /pillars/{id})
func (_ Unimplemented) UpdatePillar(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Tasks
// (GET /pillars/{id}/tasks)
func (_ Unimplemented) ListPillarTasks(w http.ResponseWriter, r *http.Request, id int32, params ListPillarTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Tasks
// (GET /tasks)
func (_ Unimplemented) ListTask(w http.ResponseWriter, r *http.Request, params ListTaskParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new Task
// (POST /tasks)
func (_ Unimplemented) CreateTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a Task by ID
// (DELETE /tasks/{id})
func (_ Unimplemented) DeleteTask(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a Task by ID
// (GET /tasks/{id})
func (_ Unimplemented) ReadTask(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a Task
// (PATCH /tasks/{id})
func (_ Unimplemented) UpdateTask(w http.ResponseWriter, r *http.Request, id int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Participants
// (GET /tasks/{id}/participants)
func (_ Unimplemented) ListTaskParticipants(w http.ResponseWriter, r *http.Request, id int32, params ListTaskParticipantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Users
// (GET /users)
func (_ Unimplemented) ListUser(w http.ResponseWriter, r *http.Request, params ListUserParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new User
// (POST /users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes a User by ID
// (DELETE /users/{id})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find a User by ID
// (GET /users/{id})
func (_ Unimplemented) ReadUser(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates a User
// (PATCH /users/{id})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Find the attached Participants
// (GET /users/{id}/participants)
func (_ Unimplemented) ListUserParticipants(w http.ResponseWriter, r *http.Request, id string, params ListUserParticipantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListBoard operation middleware
func (siw *ServerInterfaceWrapper) ListBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBoardParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBoard(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateBoard operation middleware
func (siw *ServerInterfaceWrapper) CreateBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBoard(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBoard operation middleware
func (siw *ServerInterfaceWrapper) DeleteBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBoard(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadBoard operation middleware
func (siw *ServerInterfaceWrapper) ReadBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadBoard(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateBoard operation middleware
func (siw *ServerInterfaceWrapper) UpdateBoard(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateBoard(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListBoardParticipants operation middleware
func (siw *ServerInterfaceWrapper) ListBoardParticipants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBoardParticipantsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBoardParticipants(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListBoardTasks operation middleware
func (siw *ServerInterfaceWrapper) ListBoardTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBoardTasksParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBoardTasks(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListGrant operation middleware
func (siw *ServerInterfaceWrapper) ListGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGrantParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListGrant(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGrant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteGrant operation middleware
func (siw *ServerInterfaceWrapper) DeleteGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteGrant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadGrant operation middleware
func (siw *ServerInterfaceWrapper) ReadGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadGrant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateGrant operation middleware
func (siw *ServerInterfaceWrapper) UpdateGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateGrant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListParticipant operation middleware
func (siw *ServerInterfaceWrapper) ListParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParticipantParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListParticipant(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateParticipant operation middleware
func (siw *ServerInterfaceWrapper) CreateParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateParticipant(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteParticipant operation middleware
func (siw *ServerInterfaceWrapper) DeleteParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteParticipant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadParticipant operation middleware
func (siw *ServerInterfaceWrapper) ReadParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadParticipant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateParticipant operation middleware
func (siw *ServerInterfaceWrapper) UpdateParticipant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateParticipant(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListParticipantBoards operation middleware
func (siw *ServerInterfaceWrapper) ListParticipantBoards(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParticipantBoardsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListParticipantBoards(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListParticipantTasks operation middleware
func (siw *ServerInterfaceWrapper) ListParticipantTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParticipantTasksParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListParticipantTasks(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPillar operation middleware
func (siw *ServerInterfaceWrapper) ListPillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPillarParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPillar(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePillar operation middleware
func (siw *ServerInterfaceWrapper) CreatePillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePillar(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePillar operation middleware
func (siw *ServerInterfaceWrapper) DeletePillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePillar(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadPillar operation middleware
func (siw *ServerInterfaceWrapper) ReadPillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadPillar(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatePillar operation middleware
func (siw *ServerInterfaceWrapper) UpdatePillar(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePillar(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPillarTasks operation middleware
func (siw *ServerInterfaceWrapper) ListPillarTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPillarTasksParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPillarTasks(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTask operation middleware
func (siw *ServerInterfaceWrapper) ListTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTaskParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTask(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTask(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadTask operation middleware
func (siw *ServerInterfaceWrapper) ReadTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadTask(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTask(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTaskParticipants operation middleware
func (siw *ServerInterfaceWrapper) ListTaskParticipants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTaskParticipantsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTaskParticipants(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUser operation middleware
func (siw *ServerInterfaceWrapper) ListUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUser(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadUser operation middleware
func (siw *ServerInterfaceWrapper) ReadUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUserParticipants operation middleware
func (siw *ServerInterfaceWrapper) ListUserParticipants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserParticipantsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", r.URL.Query(), &params.ItemsPerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemsPerPage", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserParticipants(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/boards", wrapper.ListBoard)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/boards", wrapper.CreateBoard)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/boards/{id}", wrapper.DeleteBoard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/boards/{id}", wrapper.ReadBoard)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/boards/{id}", wrapper.UpdateBoard)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/boards/{id}/participants", wrapper.ListBoardParticipants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/boards/{id}/tasks", wrapper.ListBoardTasks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/grants", wrapper.ListGrant)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/grants", wrapper.CreateGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/grants/{id}", wrapper.DeleteGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/grants/{id}", wrapper.ReadGrant)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/grants/{id}", wrapper.UpdateGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/participants", wrapper.ListParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/participants", wrapper.CreateParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/participants/{id}", wrapper.DeleteParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/participants/{id}", wrapper.ReadParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/participants/{id}", wrapper.UpdateParticipant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/participants/{id}/boards", wrapper.ListParticipantBoards)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/participants/{id}/tasks", wrapper.ListParticipantTasks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pillars", wrapper.ListPillar)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pillars", wrapper.CreatePillar)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pillars/{id}", wrapper.DeletePillar)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pillars/{id}", wrapper.ReadPillar)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/pillars/{id}", wrapper.UpdatePillar)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pillars/{id}/tasks", wrapper.ListPillarTasks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks", wrapper.ListTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/tasks/{id}", wrapper.DeleteTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/{id}", wrapper.ReadTask)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/tasks/{id}", wrapper.UpdateTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/{id}/participants", wrapper.ListTaskParticipants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.ListUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.ReadUser)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/{id}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}/participants", wrapper.ListUserParticipants)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
